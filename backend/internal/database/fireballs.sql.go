// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fireballs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFireball = `-- name: CreateFireball :one

INSERT INTO fireballs (
    id,
    created_at,
    updated_at,
    total_radiated_energy, 
    feed_id
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, total_radiated_energy, feed_id
`

type CreateFireballParams struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	TotalRadiatedEnergy float64
	FeedID              uuid.UUID
}

func (q *Queries) CreateFireball(ctx context.Context, arg CreateFireballParams) (Fireball, error) {
	row := q.db.QueryRowContext(ctx, createFireball,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.TotalRadiatedEnergy,
		arg.FeedID,
	)
	var i Fireball
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalRadiatedEnergy,
		&i.FeedID,
	)
	return i, err
}

const getFireballsForUser = `-- name: GetFireballsForUser :many
SELECT fireballs.id, fireballs.created_at, fireballs.updated_at, fireballs.total_radiated_energy, fireballs.feed_id 
FROM fireballs
JOIN feed_follows ON fireballs.feed_id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
ORDER BY fireballs.created_at DESC
LIMIT $2
`

type GetFireballsForUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

func (q *Queries) GetFireballsForUser(ctx context.Context, arg GetFireballsForUserParams) ([]Fireball, error) {
	rows, err := q.db.QueryContext(ctx, getFireballsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fireball
	for rows.Next() {
		var i Fireball
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalRadiatedEnergy,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
